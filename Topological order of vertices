#include <stdio.h>
#include <stdlib.h>

#define MAX 100

int adj[MAX][MAX];
int in_degree[MAX];
int queue[MAX];
int front = 0, rear = -1;
int n;

void enqueue(int v) {
    queue[++rear] = v;
}

int dequeue() {
    return queue[front++];
}

int isQueueEmpty() {
    return front > rear;
}

void topological_sort() {
    int i, v, count = 0;
    int topo_order[MAX];
    
    // Enqueue vertices with in-degree 0
    for (i = 0; i < n; i++) {
        if (in_degree[i] == 0) {
            enqueue(i);
        }
    }

    while (!isQueueEmpty()) {
        v = dequeue();
        topo_order[count++] = v;

        // Decrease the in-degree of all adjacent vertices
        for (i = 0; i < n; i++) {
            if (adj[v][i]) {
                in_degree[i]--;
                if (in_degree[i] == 0) {
                    enqueue(i);
                }
            }
        }
    }

    if (count != n) {
        printf("The graph has a cycle. Topological sorting not possible.\n");
        return;
    }

    printf("Topological Order: ");
    for (i = 0; i < count; i++) {
        printf("%d ", topo_order[i]);
    }
    printf("\n");
}

int main() {
    int i, j, edges, start, end;

    printf("Enter the number of vertices: ");
    scanf("%d", &n);

    // Initialize adjacency matrix and in-degree array
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            adj[i][j] = 0;
        }
        in_degree[i] = 0;
    }

    printf("Enter the number of edges: ");
    scanf("%d", &edges);

    printf("Enter the edges (start end):\n");
    for (i = 0; i < edges; i++) {
        scanf("%d%d", &start, &end);
        adj[start][end] = 1; // Add edge to adjacency matrix
        in_degree[end]++;
    }

    topological_sort();

    return 0;
}
