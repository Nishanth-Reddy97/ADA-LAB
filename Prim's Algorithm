#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#define MAX_VERTICES 100  // Define a maximum number of vertices

// Function to find the vertex with the minimum key value that is not yet included in MST
int minKey(int key[], int mstSet[], int V) {
    int min = INT_MAX, min_index;

    for (int v = 0; v < V; v++) {
        if (mstSet[v] == 0 && key[v] < min) {
            min = key[v];
            min_index = v;
        }
    }
    return min_index;
}

// Function to print the constructed MST
void printMST(int parent[], int graph[MAX_VERTICES][MAX_VERTICES], int V) {
    printf("Edge \t Weight\n");
    for (int i = 1; i < V; i++) {
        printf("%d - %d \t %d\n", parent[i], i, graph[i][parent[i]]);
    }
}

// Function to implement Prim's algorithm for MST
void primMST(int graph[MAX_VERTICES][MAX_VERTICES], int V) {
    int parent[V];  // Array to store constructed MST
    int key[V];     // Key values to pick minimum weight edge in cut
    int mstSet[V];  // To represent the set of vertices included in MST

    // Initialize all key values as INFINITE
    for (int i = 0; i < V; i++) {
        key[i] = INT_MAX;
        mstSet[i] = 0;
    }

    // Start with the first vertex (0th index)
    key[0] = 0;
    parent[0] = -1;  // First node is the root of MST

    // The MST will have V vertices
    for (int count = 0; count < V - 1; count++) {
        // Pick the minimum key vertex from the set of vertices not yet processed
        int u = minKey(key, mstSet, V);

        // Add the picked vertex to the MST set
        mstSet[u] = 1;

        // Update key value and parent index of the adjacent vertices of the picked vertex
        for (int v = 0; v < V; v++) {
            // Update the key only if graph[u][v] is smaller than the current key of v
            if (graph[u][v] != 0 && mstSet[v] == 0 && graph[u][v] < key[v]) {
                key[v] = graph[u][v];
                parent[v] = u;
            }
        }
    }

    // Print the constructed MST
    printMST(parent, graph, V);
}

int main() {
    int V, E;

    // Take the number of vertices as input
    printf("Enter the number of vertices: ");
    scanf("%d", &V);

    // Declare the adjacency matrix with a fixed size
    int graph[MAX_VERTICES][MAX_VERTICES];

    // Initialize the graph with zeros (no edges initially)
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            graph[i][j] = 0;
        }
    }

    // Take the number of edges as input
    printf("Enter the number of edges: ");
    scanf("%d", &E);

    // Take each edge and its weight as input
    printf("Enter the edges (u, v, weight):\n");
    for (int i = 0; i < E; i++) {
        int u, v, weight;
        scanf("%d %d %d", &u, &v, &weight);

        // Since the graph is undirected, add the edge both ways
        graph[u][v] = weight;
        graph[v][u] = weight;
    }

    // Call Prim's algorithm to find the MST
    primMST(graph, V);

    return 0;
}
